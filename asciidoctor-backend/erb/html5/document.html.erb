<%#encoding:UTF-8%>
<%
require 'nokogiri' 
%><!DOCTYPE html>
<html<%= (attr? :nolang) ? nil : %( lang="#{attr :lang, 'en'}") %>>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=<%= attr :encoding %>">
<meta name="generator" content="Asciidoctor <%= attr 'asciidoctor-version' %>">
<meta name="viewport" content="width=device-width, initial-scale=1.0"><%
[:description, :keywords, :author, :copyright].each do |key|
  if attr? key %>
<meta name="<%= key %>" content="<%= attr key %>"><%
  end
end %>
<title><%= doctitle(:sanitize => true) || (attr 'untitled-label') %></title>
<!-- devonfw website stylesheet -->
<link rel="stylesheet" type="text/css" href="/devonfw.css">
<!-- Lunr -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/lunr.js/2.3.6/lunr.min.js" integrity="sha256-M/Awbb/BYh+Rh0aGjpQid26p1b2OBsrk2k9yAvQxPV0=" crossorigin="anonymous"></script>
<!-- JQuery -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script><%
if attr? :icons, 'font'
  if !(attr 'iconfont-remote', '').nil? %>
<link rel="stylesheet" href="<%= attr 'iconfont-cdn', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css' %>"><%
  else %>
<link rel="stylesheet" href="<%= normalize_web_path(%(#{attr 'iconfont-name', 'font-awesome'}.css), (attr :stylesdir, '')) %>"><%
  end
end
case attr 'source-highlighter'
when 'coderay'
  if (attr 'coderay-css', 'class') == 'class'
    if @safe >= Asciidoctor::SafeMode::SECURE || (attr? :linkcss) %>
<link rel="stylesheet" href="<%= normalize_web_path('asciidoctor-coderay.css', (attr :stylesdir, '')) %>"><%
    else %>
<%= Asciidoctor::Stylesheets.embed_coderay_stylesheet %>
<%
    end
  end
when 'pygments'
  if (attr 'pygments-css', 'class') == 'class'
    if @safe >= Asciidoctor::SafeMode::SECURE || (attr? :linkcss) %>
<link rel="stylesheet" href="<%= normalize_web_path('asciidoctor-pygments.css', (attr :stylesdir, '')) %>"><%
    else %>
<%= Asciidoctor::Stylesheets.embed_pygments_stylesheet(attr 'pygments-style') %>
<%
    end
  end
when 'highlightjs' %>
<link rel="stylesheet" href="<%= attr 'highlightjsdir', 'http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.4' %>/styles/<%= attr 'highlightjs-theme', 'googlecode' %>.min.css">
<script src="<%= attr 'highlightjsdir', 'http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.4' %>/highlight.min.js"></script>
<script src="<%= attr 'highlightjsdir', 'http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.4' %>/lang/common.min.js"></script>
<script>hljs.initHighlightingOnLoad()</script><%
when 'prettify' %>
<link rel="stylesheet" href="<%= attr 'prettifydir', 'http://cdnjs.cloudflare.com/ajax/libs/prettify/r298' %>/<%= attr 'prettify-theme', 'prettify' %>.min.css">
<script src="<%= attr 'prettifydir', 'http://cdnjs.cloudflare.com/ajax/libs/prettify/r298' %>/prettify.min.js"></script>
<script>document.addEventListener('DOMContentLoaded', prettyPrint)</script><%
end
if attr? 'math' %>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [<%= Asciidoctor::INLINE_MATH_DELIMITERS[:latexmath] %>],
    displayMath: [<%= Asciidoctor::BLOCK_MATH_DELIMITERS[:latexmath] %>],
    ignoreClass: 'nomath|nolatexmath'
  },
  asciimath2jax: {
    delimiters: [<%= Asciidoctor::BLOCK_MATH_DELIMITERS[:asciimath] %>],
    ignoreClass: 'nomath|noasciimath'
  }
});
</script>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML"></script>
<script>document.addEventListener('DOMContentLoaded', MathJax.Hub.TypeSet)</script><%
end
%><%= (docinfo_content = docinfo).empty? ? nil : %(
#{docinfo_content}) %>
</head>
<body<%= @id && %( id="#{@id}") %> class="<%= [(attr :doctype),((attr? 'toc-class') && (attr? :toc) && (attr? 'toc-placement', 'auto') ? %(#{attr 'toc-class'} toc-#{attr 'toc-position', 'left'}) : nil)].compact * ' ' %>"<%= (attr? 'max-width') ? %( style="max-width: #{attr 'max-width'};") : nil %>><%
unless noheader %>
<div id="website-navbar" class="website-navbar"><%= Nokogiri::HTML(open(normalize_system_path('header.html', '../../target/generated-docs/website/_includes/header/'))).at_css('div.website-navbar').inner_html %>
<form class="form-inline my-2 my-lg-0">
  <div class="search-bar">
    <input
      id="search-field"
      type="search"
      class="form-control mr-sm-2"
      placeholder="Search by keyword(s)..."
      aria-label="Search"/>
    <div class="sb-res-pos px-4 z-100">
      <div class="col rounded px-0 border bg-white hidden search-bar-results" id="search-results-box">
      </div>
    </div>
  </div>
</form>
<a class="navbar-brand text-white mr-auto ml-3 ml-lg-0" href="https://github.com/devonfw/devonfw-official-website">
  <img src="/images/github-mark.png" width=auto height=auto alt="">
</a></div>
<div id="sidebar" class="wiki-sidebar"></div>
<div id="header"><%
  if doctype == 'manpage' %>
<h1><%= doctitle %> Manual Page</h1><%
    if (attr? :toc) && (attr? 'toc-placement', 'auto') %>
<div id="toc" class="<%= attr 'toc-class', 'toc' %>">
<div id="toctitle"><%= attr 'toc-title' %></div>
<%= converter.convert self, 'outline' %>
</div><%
    end %>
<h2><%= attr 'manname-title' %></h2>
<div class="sectionbody">
<p><%= %(#{attr :manname} - #{attr :manpurpose}) %></p>
</div><%
  else %>
  <div id="wiki-content" class="wiki-content"><%
    if has_header?
      unless notitle %>
<h1><%= @header.title %></h1><%
      end
      if (attr? :author) || (attr? :revnumber) || (attr? :revdate) || (attr? :revremark) %>
<div class="details"><%
        if attr? :author %>
<span id="author" class="author"><%= attr :author %></span><br><%
          if attr? :email %>
<span id="email" class="email"><%= sub_macros(attr :email) %></span><br><%
          end
          if (authorcount = (attr :authorcount).to_i) > 1
            (2..authorcount).each do |idx| %>
<span id="author<%= idx %>" class="author"><%= attr %(author_#{idx}) %></span><br><%
              if attr?  %(email_#{idx}) %>
<span id="email<%= idx %>" class="email"><%= sub_macros(attr %(email_#{idx})) %></span><br><%
              end
            end
          end
        end
        if attr? :revnumber %>
<span id="revnumber"><%= ((attr 'version-label') || '').downcase %> <%= attr :revnumber %><%= attr?(:revdate) ? ',' : '' %></span><%
        end
        if attr? :revdate %>
<span id="revdate"><%= attr :revdate %></span><%
        end
        if attr? :revremark %>
<br>
<span id="revremark"><%= attr :revremark %></span><%
        end %>
</div><%
      end
    end %>
  </div><%
    if (attr? :toc) && (attr? 'toc-placement', 'auto') %>
<div id="toc" class="<%= attr 'toc-class', 'toc' %>">
<div id="toctitle"><%= attr 'toc-title' %></div>
<%= converter.convert self, 'outline' %>
</div><%
    end
  end %>
</div><%
end %>
<div id="content">
<%= content %>
</div><%
unless !footnotes? || attr?(:nofootnotes) %>
<div id="footnotes">
<hr><%
  footnotes.each do |fn| %>
<div class="footnote" id="_footnote_<%= fn.index %>">
<a href="#_footnoteref_<%= fn.index %>"><%= fn.index %></a>. <%= fn.text %>
</div><%
  end %>
</div><%
end %><%
unless nofooter %>
<div id="footer" class="footer"><%= Nokogiri::HTML(open(normalize_system_path('footer.html', '../../target/generated-docs/website/_includes/footer/'))).at_css('div#content').inner_html %></div>
    <script type="module">
      import { HeaderModule } from '/website/components/header/header.js';
      import { ConfigModule } from '/website/config/devonfw-site-conf.js';
      import { UtilsModule } from '/website/shared/utils.js';

      const DOCS_DEST = '#wiki-content';
      const NAVBAR_DEST = '#website-navbar';
      const INITAL_PAGE_URL = ConfigModule.pagesLocation.docsPage.initialPage;
      const SIDEBAR_URL = ConfigModule.pagesLocation.docsPage.sidebar;
      const SIDEBAR_NAME = 'Features';
      const FOOTER_DEST = '#footer';
      let searchData = { index: null, documents: null };
      UtilsModule.loadIndex(searchData);

      $(window).on('load', function() {
        //let urlParam = UtilsModule.getParametersFromUrl();
        //let loadUrl = urlParam
        //  ? `${urlParam} #content`
        //  : `${INITAL_PAGE_URL} #content`;

        const queryFun = () => {
          HeaderModule.queryFunction(searchData);
        };

        //HeaderModule.loadNavbar(NAVBAR_DEST, () => {
          HeaderModule.searchOnClick(queryFun);
        //});

        //DocsModule.loadSidebar('#sidebar', `${SIDEBAR_URL} #toc`, function() {
      });
    </script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
      integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
      integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
      crossorigin="anonymous"
    ></script><%
if attr? :revnumber %>
<%= %(#{attr 'version-label'} #{attr :revnumber}) %><br><%
end
if attr? 'last-update-label' %>
<%= %(#{attr 'last-update-label'} #{attr :docdatetime}) %><%
end %><%= (docinfo_content = (docinfo :footer)).empty? ? nil : %(
#{docinfo_content}) %>
</div>
</div><%
end %>
</body>
</html>
