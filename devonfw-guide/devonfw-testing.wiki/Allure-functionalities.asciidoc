:toc: macro
toc::[]
:idprefix:
:idseparator: - 

= How it works?

http://allure.qatools.ru/[Allure] is based on standard https://en.wikipedia.org/wiki/XUnit[xUnit] results output but adds some supplementary data. Any report is generated in two steps.

. *During test execution*, a small library called adapter attached to the testing framework saves information about executed tests to XML files.
. *During report generation*, the XML files are transformed to a HTML report. This can be done with a command line tool, a plugin for https://en.wikipedia.org/wiki/Continuous_integration[CI] or a build tool.

= List of features
. https://github.com/devonfw/devonfw-testing/wiki/Allure-functionalities#steps[Steps]
. https://github.com/devonfw/devonfw-testing/wiki/Allure-functionalities#attachments[Attachments]
. https://github.com/devonfw/devonfw-testing/wiki/Allure-functionalities#features-and-stories[Features & Stories]
. https://github.com/devonfw/devonfw-testing/wiki/Allure-functionalities#parameters[Parameters]
. https://github.com/devonfw/devonfw-testing/wiki/Allure-functionalities#environment[Environment]
. https://github.com/devonfw/devonfw-testing/wiki/Allure-functionalities#issues[Issues]
. https://github.com/devonfw/devonfw-testing/wiki/Allure-functionalities#test_case_ID[Test Case ID]

== Steps
*Steps* are actions that constitute a testing scenario. *Steps* can be used in different testing scenarios. 
They can: 

. _Be parametrized_
. _Make checks_
. _Have nested steps and create attachments_
. _Each step has a name_

== Attachments

You can specify exact https://en.wikipedia.org/wiki/Media_type[MIME] type for each attached using parameter of _@Attachment_ annotation. However there's no need to explicitly specify *attachment* *type* for all *attached* *files* as *Allure* by default analyses *attachment* *contents* and can determine *attachment* *type* automatically. 
You usually need to specify *attachment* type when working with plain text files.
	
== Features and Stories

In order to group your tests by *features* and *stories* in Java, simply annotate the test suit or test case with _@Features_ or _@Stories_ annotation
Each of these annotations can take either a single string or a string array, because one test case can relate to several *features* and *stories*
	
== Parameters

*Parameter* is any value describing your test environment or current test case. A *parameter* can store something that does not change during all test, or something that changes from test case to test case.
Any value assigned to such a field will be shown in the report.
	
*NOTE*: Constant fields (static final) with a String or a primitive value type do not work with _@Parameter_ annotation.	Some tests frameworks support parametrised tests. Test *parameter* *names* and values can be made visible in *Allure* report.

== Environment

*Allure* allows you to add test environment values such as report name, browser or test server address:

There are several ways to add the environment to your report:

Save the file *environment.xml* in the following format to the *Allure* results directory:

[source, xml]
----		
<qa:environment xmlns:qa="urn:model.commons.qatools.yandex.ru">
  <id>2a54c4d7-7d79-4615-b80d-ffc1107016a1</id>
   <name>Allure sample test pack</name>
    <parameter>
        <name>Browser</name>
        <key>my.properties.browser</key>
        <value>Firefox</value>
    </parameter>
    <parameter>
        <name>Test stand</name>
        <key>my.properties.url</key>
        <value>http://yandex.ru</value>
    </parameter>
</qa:environment>  
----

* Add the properties file *environment.properties* to the *Allure* results directory:
----
my.properties.browser=Chrome
my.properties.url=http://yandex.ru
----
	
== Issues
*Issues* are any software problems that are stored in so-called _issue_ _trackers_. When any of these problems are fixed, 
a test should be created to prevent it from appearing in the future.
	
=== Annotations
To link a test case or a test suite to such *issues*, you can use _@Issue_ annotation. Simply specify the *issue* *key* like this

[source, java]
----
	@Issue("MYISSUE-1")
	public void testSomething() {
     	...
	}
----

To add multiple, use @Issues annotation

[source, java]
----
	@Issues({
   	    @Issue("MYISSUE-1"),
    	    @Issue("MYISSUE-2")
        })
	public void testSomething() {
     	    ...
	}
----

== Test suite issues
You can also use the syntax shown above to annotate *test* *suites* instead of separate test cases. In this case, each test case in this *test* *suite* will be linked to the *issue* specified

== Test Case ID
*Test* *Case* *ID* is reference to *test* *case* in so-called *Test* *Management* *System* (_TMS_). It is not allowed to have more than one reference per *test* *case* by definition.

=== Annotations

To link a *test* *case* to *Test* *Management* *System*, you can use _@TestCaseId_ annotation, simply specify the *test* *case* *ID* as shown below:

[source, java]
----
	@TestCaseId("TMS-1")
	public void testSomething() {
     		...
	}
----

= Allure + Selenium

*Allure* framework can help with generating HTML reports for http://www.seleniumhq.org/[Selenium] projects. The reporting framework is very flexible and it works with many programming languages and unit testing frameworks.

Using https://en.wikipedia.org/wiki/JUnit[Junit] for running *automation* *testing* *scripts*, everything that you get is a visual report of the test result. For each test script, the execution status (pass/fail) is displayed, together with the execution time and details of the error.

Problems with visual reports are that:

* It cannot be saved
* The amount of information that it includes is very limited
* It's not possible to see over time how the test scripts run

Allure solves with functionalities

* An overview report for multiple test suites
* Detailed report for a test suite
* Graphical reports 