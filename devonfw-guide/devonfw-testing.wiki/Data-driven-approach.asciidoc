:toc: macro
toc::[]
:idprefix:
:idseparator: - 


== Data driven approach 

image:images/allure/49.png[approach]

*Data* *driven* *approach* - External *data* *driven*

*External* *data* *driven* - Data as external file injected in *test* *case*
 
*Test* *case* - Categorize *functionality* and *severity*


More information about data driven you can find https://dzone.com/articles/working-with-junitparams[here] and https://github.com/Pragmatists/JUnitParams[here]


There are a few ways to define parameters for tests. 

= Internal Data driven approach

Data as *part* of *test case*

Parameters that are passed into tests using the @Parameters annotation must be Object[]s

The different means to pass in parameters are shown below.

=== In the annotation:

[source,java]
----
@Parameters({"1, 2, 3", "3, 4, 7", "5, 6, 11", "7, 8, 15"})
----

image:images/datadriven/DataDriven_Parameters.PNG[approach]


The parameters must be primitive objects such as integers, strings, or booleans. Each set of parameters is contained within a single string and will be parsed to their correct values as defined by the test method's signature.

=== In a method named in the annotation:

[source,java]
----
@Parameters(method = "addParameters")
----

image:images/datadriven/DataDriven_ParametersMethod.PNG[approach]

A separate method can be defined and referred to for parameters. This method must return an Object[] and can contain normal objects.

=== In a class:

[source,java]
----
@Parameters(source = MyContainsTestProvider.class)
----

image:images/datadriven/DataDriven_ParametersClass.PNG[approach]

A separate class can be used to define parameters for the test. This test must contain at least one static method that returns an Object[], and its name must be prefixed with provide. The class could also contain multiple methods that provide parameters to the test, as long as they also meet the required criteria.



= External Data Driven
Data as *external file injected* in *test case*

Tests use the annotation @FileParameters to inject CSVs file. 

[source,java]
----
@FileParameters("src/test/resources/datadriven/test.csv")
----

A CSV can also be used to contain the parameters for the tests. It is pretty simple to set up, as it's just a comma separated list. 

=== Classic CSV 

image:images/datadriven/DataDriven_ParamCSV.PNG[approach]

and CSV file structure 

image:images/datadriven/DataDriven_testCSV.PNG[approach]


=== CSV with headers

image:images/datadriven/DataDriven_ParamCSV_Header.PNG[approach]

and CSV file structure 

image:images/datadriven/DataDriven_test_withHeaderCSV.PNG[approach]

=== CSV with specific column mapper

image:images/datadriven/DataDriven_ParamCSV_SpecificMapper.PNG[approach]

and Mapper implementation

DataDriven_ParamCSV_ImpMapper.PNG
