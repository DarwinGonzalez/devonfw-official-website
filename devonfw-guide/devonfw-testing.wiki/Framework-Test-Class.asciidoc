:toc: macro
toc::[]
:idprefix:
:idseparator: -

= Test Class

== Overview

The following image gives a general overview of the test class "lifecycle".

image::images/test-class-structure.png["Structure of the Test Class", width="450", link="images/test-class-structure.png"]

More information on the methods and annotations used in this image can be found in the following chapter.

== Methods and annotations

The actual tests that will be executed are loacted in so called _Test Classes_. Starting a new project, a new package should be created.

*Source folder*: mrchecker-app-under-test/src/test/java

*Name*: com.example.selenium.tests.tests.YOUR_PROJECT

Test classes have to extend the *BaseTest* class.

[source, java]
----
public class DemoTest extends BaseTest {

	@Override
	public void setUp() {

	}

	@Override
	public void tearDown() {

	}
}
----

=== BasePage method: setUp

This method will be executed before the test. It allows objects to be instantiated, e.g. Page objects.

[source, java]
----
@Override
public void setUp() {
	someTestPage = new SomeTestPage();
}
----

=== BasePage method: tearDown

The tearDown methods executes after the test. It allows the clean up of the testing environment.

=== Annotations

The _@Test_ annotation indicates that the following method is a test method.

Additionally, there are two annotations that can help preparing and disassembling the test class: _@BeforeClass_ and _@AfterClass_.

_@BeforeClass_ will execute the following method once at the beginning, before running any test method. Compared to the _setUp()_ method provided by the BaseTest class, this annotation will only run once, instead of before every single test method. The advantage here: Things like login can be set up in _@BeforeClass_, as they can oftentimes be very time consuming. Loggin in on a webapplication once and afterwards running all the test methods is more efficient than loggin in before every test method, even though they are being executed on the same page.

_@AfterClass_ will execute after the last test method. Just like _@BeforeClass_ this method will only run once, in contrary to the _tearDown()_ method.


Initialize a new test method by using the _@Test_ annotation.

[source, java]
----
@Test
public void willResultBeShown() {

}
----

This method will interact with a page object in order to test it.

=== Sample setup

[source, java]
----
@BeforeClass
public static void setUpBeforeClass() throws Exception {
	BFLogger.logInfo("[Step1] Login as Account Administrator");
}

@AfterClass
public static void tearDownAfterClass() throws Exception {
	BFLogger.logInfo("[Step4] Logout");
}

@Override
public void setUp() {
	BFLogger.logInfo("Open home page before each test");
}

@Override
public void tearDown() {
	BFLogger.logInfo("Clean all data updated while executing each test");
}

@Test
public void test1() {
	BFLogger.logInfo("[Step2] Filter by \"Creation Date\" - Descending");
	BFLogger.logInfo("[Step3] Set $1 for first 10 Users in column \"Invoice to pay\"");

}

@Test
public void test2() {
	BFLogger.logInfo("[Step2] Filter by \"Invoice to pay\" - Ascending");
	BFLogger.logInfo("[Step3] Set $100 for first 10 Users in column \"Invoice to pay\"");
}
----
